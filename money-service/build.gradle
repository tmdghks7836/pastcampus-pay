plugins{
    id 'com.palantir.docker' version '0.25.0'
    id 'com.google.cloud.tools.jib' version '3.1.2'
}

ext{
    axonVersion = "4.6.0"
}

group 'com.fastcampuspay.money'
version = '0.0.2'

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    testImplementation 'com.tngtech.archunit:archunit:1.0.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api
    implementation 'javax.persistence:javax.persistence-api:2.2'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'junit:junit:4.13.1'

    implementation 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    /** common module */
    implementation project(':common')

    /** axon framework */
    implementation group: 'org.axonframework', name: 'axon-configuration', version: "$axonVersion"
    implementation group: 'org.axonframework', name: 'axon-spring-boot-starter', version: "$axonVersion"
    implementation group:  'org.axonframework', name: 'axon-micrometer', version: "$axonVersion"


}


docker {
    //이미지 이름
    name rootProject.name + '-' + project.name  + ":"+ project.version
    //어떤 Dockerfile
    dockerfile file('..\\Dockerfile')
    //어떤 파일들을 Dockerfile 에 복사할 것인가
    files tasks.bootJar.outputs.files
    //Dockerfile 에 전달할 인자
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}


jib {

    from {
        image = 'adoptopenjdk/openjdk11'
    }
    to {
        image = 'tmdghks0021/' + rootProject.name + '-' + project.name
        tags = [project.version]
    }
    container {
        ports = ["8080"]
    }
}